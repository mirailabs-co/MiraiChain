"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[117],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>y});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function u(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=t.createContext({}),l=function(e){var n=t.useContext(o),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},c=function(e){var n=l(e.components);return t.createElement(o.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),d=l(r),m=a,y=d["".concat(o,".").concat(m)]||d[m]||p[m]||s;return r?t.createElement(y,i(i({ref:n},c),{},{components:r})):t.createElement(y,i({ref:n},c))}));function y(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=r.length,i=new Array(s);i[0]=m;var u={};for(var o in n)hasOwnProperty.call(n,o)&&(u[o]=n[o]);u.originalType=e,u[d]="string"==typeof e?e:a,i[1]=u;for(var l=2;l<s;l++)i[l]=r[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3079:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>u,toc:()=>l});var t=r(7462),a=(r(7294),r(3905));const s={sidebar_position:2},i="Example",u={unversionedId:"mrc20/example",id:"mrc20/example",title:"Example",description:"MRC20Upgradeable.sol",source:"@site/docs/mrc20/example.md",sourceDirName:"mrc20",slug:"/mrc20/example",permalink:"/docs/mrc20/example",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/mrc20/example.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Token Stardard",permalink:"/docs/mrc20/"},next:{title:"Bridge",permalink:"/docs/category/bridge"}},o={},l=[],c={toc:l},d="wrapper";function p(e){let{components:n,...r}=e;return(0,a.kt)(d,(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"example"},"Example"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"MRC20Upgradeable.sol")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol";\nimport "./MIP712Upgradeable.sol";\nimport "../interfaces/IMRC20.sol";\n\ncontract MRC20Upgradeable is IMRC20, ERC20Upgradeable, MIP712Upgradeable {\n    bytes32 public constant PERMIT_TYPEHASH =\n    keccak256("Permit(address owner,address spender,uint256 value,uint256 fee,uint256 nonce,uint256 deadline)");\n\n    bytes32 public constant TRANSFER_TYPEHASH =\n    keccak256("Transfer(address owner,address to,uint256 value,uint256 fee,uint256 nonce,uint256 deadline)");\n\n    bytes32 public constant PAY_TYPEHASH =\n    keccak256("Pay(address owner,address to,uint256 value,uint256 fee,uint256 nonce,uint256 deadline)");\n\n    bytes32 public constant BURN_TYPEHASH =\n    keccak256("Burn(address owner,uint256 value,uint256 fee,uint256 nonce,uint256 deadline)");\n\n    mapping(address => uint256) public nonces;\n\n    // Define a mapping to keep track of used signatures\n    mapping(bytes32 => bool) private _usedPayId;\n\n    modifier validatePayId(string memory payId) {\n        bytes32 payIdHash = keccak256(bytes(payId));\n        require(!_usedPayId[payIdHash], "MRC20: PayId has already been used");\n        _usedPayId[payIdHash] = true;\n        _;\n    }\n\n    function __MRC20_init(string memory name_, string memory symbol_, string memory version_) internal onlyInitializing {\n        __MIP712_init(name_, version_);\n        __ERC20_init(name_, symbol_);\n    }\n\n    function transferWithPermit(\n        TransferRequest calldata request,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) validateDeadline(request.deadline)\n    public override returns (bool) {\n        bytes32 structHash = keccak256(abi.encode(\n                TRANSFER_TYPEHASH,\n                request.owner,\n                request.to,\n                request.value,\n                request.fee,\n                nonces[request.owner]++,\n                request.deadline\n            ));\n        _verifyEIP712(request.owner, structHash, v, r, s);\n        _transfer(request.owner, request.to, request.value);\n\n        if (request.fee > 0) {\n            _transfer(request.owner, msg.sender, request.fee);\n        }\n\n        return true;\n    }\n\n    function payWithPermit(PayRequest calldata request, uint8 v, bytes32 r, bytes32 s)\n    validateDeadline(request.deadline)\n    validatePayId(request.payId)\n    public override returns (bool) {\n        bytes32 structHash = keccak256(abi.encode(\n                PAY_TYPEHASH,\n                request.owner,\n                request.to,\n                request.value,\n                request.fee,\n                nonces[request.owner]++,\n                request.deadline\n            ));\n        _verifyEIP712(request.owner, structHash, v, r, s);\n        _transfer(request.owner, request.to, request.value);\n\n        if (request.fee > 0) {\n            _transfer(request.owner, msg.sender, request.fee);\n        }\n\n        emit Pay(request.owner, request.to, request.payId, request.value, request.fee);\n\n        return true;\n    }\n\n    function burnWithPermit(\n        BurnRequest calldata request,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    )\n    validateDeadline(request.deadline)\n    public override returns (bool) {\n        bytes32 structHash = keccak256(abi.encode(\n                BURN_TYPEHASH,\n                request.owner,\n                request.value,\n                request.fee,\n                nonces[request.owner]++,\n                request.deadline\n            ));\n        _verifyEIP712(request.owner, structHash, v, r, s);\n\n        _burn(request.owner, request.value);\n\n        if (request.fee > 0) {\n            _transfer(request.owner, msg.sender, request.fee);\n        }\n\n        return true;\n    }\n\n    function permit(PermitRequest calldata request, uint8 v, bytes32 r, bytes32 s)\n    validateDeadline(request.deadline)\n    public override {\n        bytes32 structHash = keccak256(abi.encode(\n                PERMIT_TYPEHASH,\n                request.owner,\n                request.spender,\n                request.value,\n                request.fee,\n                nonces[request.owner]++,\n                request.deadline\n            ));\n        _verifyEIP712(request.owner, structHash, v, r, s);\n        _approve(request.owner, request.spender, request.value);\n\n        if (request.fee > 0) {\n            _transfer(request.owner, msg.sender, request.fee);\n        }\n    }\n\n    function burn(uint256 amount) external {\n        _burn(msg.sender, amount);\n    }\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"MIP712Upgradeable.sol")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol";\n\ncontract MIP712Upgradeable is EIP712Upgradeable {\n    modifier validateDeadline(uint deadline) {\n        require(block.timestamp <= deadline, "MIP712: EXPIRED");\n        _;\n    }\n\n    function __MIP712_init(string memory name_, string memory version_) internal onlyInitializing {\n        __EIP712_init(name_, version_);\n    }\n\n    function _verifyEIP712(\n        address from,\n        bytes32 structHash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal view {\n        address signer = ECDSAUpgradeable.recover(_hashTypedDataV4(structHash), v, r, s);\n        require(signer != address(0) && signer == from, "MIP712: INVALID_SIGNATURE");\n    }\n\n    function _getSigner(\n        bytes32 structHash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal view returns (address){\n        return ECDSAUpgradeable.recover(_hashTypedDataV4(structHash), v, r, s);\n    }\n}\n')))}p.isMDXComponent=!0}}]);